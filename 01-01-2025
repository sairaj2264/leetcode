You are given a string s, where every two consecutive vertical bars '|' are grouped into a pair. In other words, the 1st and 2nd '|' make a pair, the 3rd and 4th '|' make a pair, and so forth.

Return the number of '*' in s, excluding the '*' between each pair of '|'.

Note that each '|' will belong to exactly one pair.

class Solution {
public:
    int countAsterisks(string s) {
        int i,pipe=0,count=0;
        for(i=0;i<s.size();i++){
            if(s[i]=='|'){
                pipe++;
            }
            if(pipe%2==1){
                continue;
            }
            if(s[i]=='*'){
                count++;
            }
        }

        return count;


Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

class Solution {
public:
    int reverse(int x) {
        long long reversed =0, i=0, temp=0;
        if(x < INT_MIN){
        return 0;
        }
        long long n = x;
        if(n<0){
            n *= -1;
        }
        while (n > 0){
            temp = n%10;
            reversed += temp;
            reversed *= 10;
            n /=10;
        }
        if(reversed/10 >= INT_MAX){
            return 0;
        }
        if(x < 0){
            reversed /= 10;
            reversed *= -1;
            return reversed;
        }
        return reversed/10;
        
    }
};

Given an integer x, return true if x is a 
palindrome
, and false otherwise.

class Solution {
public:
    bool isPalindrome(int x) {
        long long n , temp=0,palin=0;
        if(x < 0){
            return 0;
        }
        n = x;
        while(n>0){
            temp = n%10;
            palin += temp;
            palin *= 10;
            n /= 10;
        }
        if(palin/10 == x){
            return 1;
        }
        return 0;
        
    }
};


https://leetcode.com/problems/two-sum/
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (nums[i] + nums[j] == target) {
                    return {i, j};
                }
            }
        }
        return {0};
        
}
};
